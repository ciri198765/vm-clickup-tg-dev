export {strings as default, strings};

const dictionary = {
  de: {},
  en: {
    agree: 'Do you agree?',
    agreementInfo: `What kind of information do we keep and process?
First of all, we do need to keep your telegram id for technical \
reasons, so you could use our TG bot. Moreover, we could need to \
keep and process data, you provide us about your case.

[More info](https://www.equal-postost.org/home/about-us/datenschutz)`,
    doYouAgree: `To continue, we need your consent to process and \
store personal data. Do you agree?`,
    feedback: `[Get a feedback](https://www.equal-postost.org/feedback)`,
    howCanWeHelp: `Please, describe in one message, what happened \
and how we can help you.`,
    info: 'Info',
    no: 'No',
    thank: 'Thank you',
    weCannotProceed: `If you do not give us consent to store and \
process your personal data, we cannot proceed.`,
    welcomeBack: 'Welcome back. We are glad to see you again.',
    yes: 'Yes',
  },
  ru: {
    agree: '–°–æ–≥–ª–∞—Å–Ω—ã?',
    agreementInfo: `–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º—ã —Ö—Ä–∞–Ω–∏–º –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º?
–í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö—Ä–∞–Ω–∏—Ç—å \
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –¢–ì. –¢–∞–∫–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ \
–∑–∞–ø—Ä–æ—Å–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏—á–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ \
–Ω–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å.

[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](https://www.equal-postost.org/home/about-us/datenschutz)`,
    contacts: `–ù–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ—Ü—Å–µ—Ç–∏:
üìé [Telegram-–∫–∞–Ω–∞–ª](https://t.me/equal_postost)
üìé [Instagram](https://instagram.com/equal_postost)
üìé [Facebook](https://www.facebook.com/equal.postost)

–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å:
[Telegram-–±–æ—Ç](https://t.me/equal_postost_bot) –∏–ª–∏ \
[Email](mailto:sos@equal-postost.org)

[–ù—É–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ](https://t.me/equal_home)

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ:\
[PayPal](https://www.paypal.com/donate/?hosted_button_id=6VRW6LGY75JZ2)

[–°—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã EQUAL PostOst]\
(https://t.me/equal_postost_bot)

[–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ (email)](mailto:info@equal-postost.org)

[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—Å](https://www.equal-postost.org/)`,
    donate: `[PayPal](https://www.paypal.com/donate/?hosted_button_id=6VRW6LGY75JZ2)`,
    doYouAgree: `–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ \
–æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?`,
    feedback: `[–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤](https://www.equal-postost.org/feedback)`,
    howCanWeHelp: `–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à—É \
—Å–∏—Ç—É–∞—Ü–∏—é, –∏ —á–µ–º –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å.`,
    info: '–ò–Ω—Ñ–æ',
    no: '–ù–µ—Ç',
    thank: '–°–ø–∞—Å–∏–±–æ',
    weCannotProceed: `–ï—Å–ª–∏ –≤—ã –Ω–µ –¥–∞–µ—Ç–µ –Ω–∞–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ \
–æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`,
    welcomeBack: '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º. –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞.',
    yes: '–î–∞',
  },
  test: { // INFO: for testing purposes
    thank: 'Thank you', // do not change nor delete
    // do not add new strings
  },
};

/**
 * @typedef {Object<string, typeof dictionary['ru']>} strings
 */
dictionary.default = dictionary['ru'];

const handler = {
  get: function(target, prop) {
    if (Object.keys(target).includes(prop)) return this[prop];
    return this.default;
  },
};

Object.keys(dictionary).forEach((lang) =>
  handler[lang] = new Proxy(dictionary, {
    get: function(target, prop) {
      if (prop in target[lang]) return target[lang][prop];
      return target.default[prop];
    },
    getOwnPropertyDescriptor: () => ({enumerable: true, configurable: true}),
    ownKeys: (target) => Object.keys(target[lang]),
  }),
);

/**
 * @type {strings}
 */
const strings = new Proxy(dictionary, handler);
